import java.net.*;
import javafx.application.*;
import javafx.scene.*;
import javafx.scene.text.*;
import javafx.stage.*;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import java.util.*;
import javafx.scene.paint.*;
import javafx.geometry.*;
import javafx.scene.image.*;
import java.io.*;
import java.util.*;
import java.text.*;
import java.io.*;
import java.lang.*;
import javafx.event.*;
import javafx.stage.*;
import javafx.scene.canvas.*;
import javafx.scene.paint.*;
import javafx.scene.*;
import javafx.scene.input.*;
import javafx.scene.layout.*;
import javafx.animation.*;
import javafx.scene.control.*;
import javafx.scene.image.*;
import java.net.*;
import javafx.geometry.*;


public class Main extends Application
{
    private Player thePlayer;
    private ArrayList<Mine> mines = new ArrayList<>();

    private boolean wPressed = false;
    private boolean aPressed = false;
    private boolean sPressed = false;
    private boolean dPressed = false;
    private Set<String> visitedGrids = new HashSet<>();
    private Set<String> spawnedMineGrids = new HashSet<>();

    private double highScore = 0;
    private final String highscoreFileName = "highscore.txt";
    private boolean gameOver = false;

    public static void main(String[] args)
	{
        launch(args);
   	}

    @Override
    public void start(Stage stage)
	{
       	 Pane root = new Pane();
       	 Canvas canvas = new Canvas(800, 800);
       	 root.getChildren().add(canvas);
       	 GraphicsContext gc = canvas.getGraphicsContext2D();
       	 Scene scene = new Scene(root);

       	 Image background = new Image("stars.png");
       	 Image overlay = new Image("starsoverlay.png");

       	 thePlayer = new Player(300, 300);
       	 loadHighScore();

        new AnimationTimer()
	{
            public void handle(long currentNanoTime) {
                if (!gameOver) {
                    update();
                }
                draw(gc, background, overlay);
            }
        }.start();

        scene.setOnKeyPressed(e -> {
            switch (e.getCode()) {
                case W:
                    wPressed = true;
                    break;
                case A:
                    aPressed = true;
                    break;
                case S:
                    sPressed = true;
                    break;
                case D:
                    dPressed = true;
                    break;
            }
        });
        scene.setOnKeyReleased(e -> {
            switch (e.getCode()) {
                case W:
                    wPressed = false;
                    break;
                case A:
                    aPressed = false;
                    break;
                case S:
                    sPressed = false;
                    break;
                case D:
                    dPressed = false;
                    break;
            }
        });

        stage.setScene(scene);
        stage.setTitle("Player Movement Game with Mines");
        stage.show();
    }

    private void update()
	{
        thePlayer.update(wPressed, aPressed, sPressed, dPressed);

        int cgridx = ((int) thePlayer.getX()) / 100;
        int cgridy = ((int) thePlayer.getY()) / 100;

        String currentGrid = cgridx + "," + cgridy;
        if (!visitedGrids.contains(currentGrid))
		{
         	   visitedGrids.add(currentGrid);

            	for (int dx = -4; dx <= 4; dx++) {
            	    for (int dy = -4; dy <= 4; dy++) {
             	       int gx = cgridx + dx;
                	    int gy = cgridy + dy;

                  	  int dist = Math.max(Math.abs(dx), Math.abs(dy));
                   	 if (dist < 3 || dist > 4)
                  	      continue;

                 	   String gridKey = gx + "," + gy;
                 	   if (!spawnedMineGrids.contains(gridKey))
			{
                   	     spawnedMineGrids.add(gridKey);

                   		int gposx = gx * 100;
                    	   	int gposy = gy * 100;

                   	    
                   	     int maxMines = 1 + (int) (Math.random() * 2); // try 1-3 mines
                    	 	   for (int i = 0; i < maxMines; i++)
				{
                         	   if (Math.random() < 0.3) { // reduced probability to 10%
                         	       double mx = gposx + Math.random() * 100;
                         	       double my = gposy + Math.random() * 100;

                          	      if (DrawlObject.distance(mx, my, thePlayer.getX(), thePlayer.getY()) < 30)
                          	          continue;

                          	      mines.add(new Mine(mx, my));
                            }
                        }
                    }
                }
            }
        }

        mines.removeIf(m -> DrawlObject.distance(thePlayer, m) > 1000);

        for (Mine m : new ArrayList<>(mines))
	{
            if (DrawlObject.distance(thePlayer, m) < 20)
	    {
                gameOver = true;
                thePlayer.setDead(true);
                mines.remove(m);
                break;
            }
        }

        double score = DrawlObject.distance(thePlayer.getX(), thePlayer.getY(), 300, 300);
        if (score > highScore)
	{
            highScore = score;
            saveHighScore(highScore);
        }
    }

    private void draw(GraphicsContext gc, Image background, Image overlay)
	{
        	gc.clearRect(0, 0, 800, 800);

       	 	double camX = thePlayer.getX() - 400;
        	double camY = thePlayer.getY() - 400;

        for (int x = -1; x <= 8; x++)
	{
            	for (int y = -1; y <= 8; y++)
		{
                	gc.drawImage(background, x * 100 - camX % 100, y * 100 - camY % 100, 100, 100);
            	}
       	}

        for (Mine m : mines)
	{
            m.draw(gc, camX, camY);
        }

        if (!thePlayer.isDead())
	{
            thePlayer.draw(gc, camX, camY);
        }

        gc.setFill(Color.WHITE);
        double score = DrawlObject.distance(thePlayer.getX(), thePlayer.getY(), 300, 300);
        gc.fillText("Score: " + (int) score, 10, 20);
        gc.fillText("Highscore: " + (int) highScore, 10, 40);

        if (gameOver)
	{
            gc.setFill(Color.RED);
            gc.fillText("Game Over!", 350, 400);
        }
    }

    private void loadHighScore()
	{
        	try (BufferedReader br = new BufferedReader(new FileReader(highscoreFileName))) {
            	String line = br.readLine();
            	if (line != null) {
                	highScore = Double.parseDouble(line);
            	}
        } catch (IOException e)
	{
            System.out.println("No highscore file found. Starting fresh.");
        }
    }

    private void saveHighScore(double score)
	{
        	try (BufferedWriter bw = new BufferedWriter(new FileWriter(highscoreFileName))) {
           	 bw.write(String.valueOf((int) score));
        } catch (IOException e) {
            System.out.println("Failed to save highscore.");
        }
    }
}

